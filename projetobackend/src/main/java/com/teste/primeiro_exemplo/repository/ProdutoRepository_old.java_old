package com.teste.primeiro_exemplo.repository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Repository;
import com.teste.primeiro_exemplo.model.Produto;
import com.teste.primeiro_exemplo.model.exception.ResourceNotFoudException;

@Repository
public class ProdutoRepository {
    
    //Simulando o banco de dados
    private ArrayList<Produto> produtos = new ArrayList<Produto>();
    private Integer ultimoId = 0;

    /**
     * Método para retornar uma lista de produtos.
     * @return Lista de Produtos.
     */
    public List<Produto> obterTodos(){
        return produtos;
    }

    /**
     * Método que retorna o produto encontrado pelo seu Id.
     * @param id do produto que será localizado.
     * @return retorna um produto caso seja encontrado.
     */
    public Optional<Produto> obterPorId(Integer id){

        return produtos
                    .stream()
                    .filter(produto -> produto.getId() == id)
                    .findFirst();
    }
    
    /**
     * Método para adicionar produto na lista.
     * @param produto que será adicionado.
     * @return retorna o produto que foi adicionado na lista.
     */
    public Produto adicionar(Produto produto){
        
        ultimoId++;
        
        produto.setId(ultimoId);
        produtos.add(produto);
        return produto;
    }

    /**
     * Método para deletar o produto por id.
     * @param id do produto a ser deletado.
     */
    public void deletar(Integer id){

        produtos.removeIf(produto -> produto.getId() == id);
    }

    /**
     * Método para atualizar o produto na lista.
     * @param produto que será atualizado.
     * @param id do produto.
     * @return Retorna o produto após atualizar a lista.
     */
    public Produto atualizar(Produto produto){
        //Encontrar o produto na lista
        Optional<Produto> produtoEncontrado = obterPorId(produto.getId());

        if(produtoEncontrado.isEmpty()){
            throw new ResourceNotFoudException("Produto não encontrado");
        }
        //Eu tenho que remover o produto antigo da lista
        deletar(produto.getId());

        //Depois adicionar o produto atualizado na lista
        produtos.add(produto);

        return produto;
    }
    
}
